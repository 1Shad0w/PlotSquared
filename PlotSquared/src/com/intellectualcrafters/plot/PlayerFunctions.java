/*
 * Copyright (c) IntellectualCrafters - 2014.
 * You are not allowed to distribute and/or monetize any of our intellectual property.
 * IntellectualCrafters is not affiliated with Mojang AB. Minecraft is a trademark of Mojang AB.
 *
 * >> File = PlayerFunctions.java
 * >> Generated by: Citymonstret at 2014-08-09 01:43
 */

package com.intellectualcrafters.plot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.OfflinePlayer;
import org.bukkit.WeatherType;
import org.bukkit.World;
import org.bukkit.block.Biome;
import org.bukkit.entity.Player;

/**
 * Functions involving players, plots and locations.
 * 
 * @author Citymonstret
 * 
 */
@SuppressWarnings("javadoc")
public class PlayerFunctions {

    /**
     * 
     * @param player
     *            player
     * @return
     */
    public static boolean isInPlot(Player player) {
        return getCurrentPlot(player) != null;
    }

    /**
     * 
     * @param plot
     *            plot
     * @return
     */
    public static boolean hasExpired(Plot plot) {
        OfflinePlayer player = Bukkit.getOfflinePlayer(plot.owner);
        long lp = player.getLastPlayed();
        long cu = System.currentTimeMillis();
        return (lp - cu) > 30l;
    }
    
    public static Set<PlotId> getPlotSelectionIds(World world, PlotId pos1, PlotId pos2) {
        Set<PlotId> myplots = new HashSet<PlotId>();
        for (int x = pos1.x; x <= pos2.x; x++) {
            for (int y = pos1.y; x <= pos2.y; x++) {
                myplots.add(new PlotId(x,y));
            }
        }
        
        return myplots;
    }
    
    public static Plot getBottomPlot(World world, Plot plot) {
        if (plot.settings.getMerged(2)) {
            return getBottomPlot(world, PlotMain.getPlots(world).get(new PlotId(plot.id.x, plot.id.y-1)));
        }
        if (plot.settings.getMerged(3)) {
            return getBottomPlot(world, PlotMain.getPlots(world).get(new PlotId(plot.id.x-1, plot.id.y)));
        }
        return plot;
    }
    public static Plot getTopPlot(World world, Plot plot) {
        if (plot.settings.getMerged(0)) {
            return getBottomPlot(world, PlotMain.getPlots(world).get(new PlotId(plot.id.x, plot.id.y-1)));
        }
        if (plot.settings.getMerged(1)) {
            return getBottomPlot(world, PlotMain.getPlots(world).get(new PlotId(plot.id.x-1, plot.id.y)));
        }
        return plot;
    }
    /**
     * 
     * @param loc
     * @return
     */
    public static PlotId getPlot(Location loc) {
        int x = loc.getBlockX();
        int z = loc.getBlockZ();

        String world = loc.getWorld().getName();
        PlotWorld plotworld = PlotMain.getWorldSettings(world);
        int size = plotworld.PLOT_WIDTH + plotworld.ROAD_WIDTH;
        int pathWidthLower;
        if ((plotworld.ROAD_WIDTH % 2) == 0) {
            pathWidthLower = (int) (Math.floor(plotworld.ROAD_WIDTH / 2)-1);
        }
        else {
            pathWidthLower = (int) Math.floor(plotworld.ROAD_WIDTH / 2);
        }
        
        int dx = x/size;
        int dz = z/size;

        if (x<0) {
            dx--;
            x+=((-dx) * size);
        }
        if (z<0) {
            dz--;
            z+=((-dz) * size);
        }

        int rx = (x)%size;
        int rz = (z)%size;
        
        int end = pathWidthLower+plotworld.PLOT_WIDTH;
        
        if (rx<=pathWidthLower) {
//            System.out.print("WEST");
            return null;
        }
        if (rx>end) {
//            System.out.print("EAST");
            return null;
        }
        if (rz<=pathWidthLower) {
//            System.out.print("NORTH");
            return null;
        }
        if (rz>pathWidthLower+plotworld.PLOT_WIDTH) {
//            System.out.print("SOUTH");
            return null;
        }
        PlotId id = new PlotId(dx,dz);
        Plot plot = PlotMain.getPlots(loc.getWorld()).get(id);
        if (plot==null) {
            return id;
        }
        return getBottomPlot(loc.getWorld(), plot).id;
    }

    /**
     * 
     * @param player
     * @param plot
     */
    public static void togglePlotWeather(Player player, Plot plot) {
        player.setPlayerWeather(plot.settings.getRain() ? WeatherType.DOWNFALL : WeatherType.CLEAR);
    }

    /**
     * 
     * @param player
     * @param plot
     */
    public static void togglePlotTime(Player player, Plot plot) {
        player.setPlayerTime(plot.settings.getTime(), false);
    }

    /**
     * 
     * @param player
     * @return
     */
    @SuppressWarnings("deprecation")
    public static Plot getCurrentPlot(Player player) {
        if (!PlotMain.isPlotWorld(player.getWorld())) {
            return null;
        }
        PlotId id = getPlot(player.getLocation());
        World world = player.getWorld();
        if (id == null) {
            return null;
        }
        HashMap<PlotId, Plot> plots = PlotMain.getPlots(world);
        if (plots != null) {
            if (plots.containsKey(id)) {
                return plots.get(id);
            }
        }
        return new Plot(id, null, Biome.FOREST, new ArrayList<UUID>(), new ArrayList<UUID>(), world.getName());

    }

    /**
     * @deprecated
     * @param id
     * @param plot
     */
    @Deprecated
    public static void set(Integer[] id, Plot plot) {
        PlotMain.updatePlot(plot);
    }

    /**
     * 
     * @param plr
     * @return
     */
    // public static Set<Plot> getPlayerPlots(Player plr) {
    // return PlotMain.getPlots(plr);
    // }
    //
    public static Set<Plot> getPlayerPlots(World world, Player plr) {
        Set<Plot> p = PlotMain.getPlots(world, plr);
        if (p == null) {
            return new HashSet<Plot>();
        }
        return p;
    }

    /**
     * 
     * @param plr
     * @return
     */
    // public static int getPlayerPlotCount(Player plr) {
    // return getPlayerPlots(plr).size();
    // }
    //
    public static int getPlayerPlotCount(World world, Player plr) {
        return getPlayerPlots(world, plr).size();
    }

    /**
     * 
     * @param p
     * @return
     */
    @SuppressWarnings("SuspiciousNameCombination")
    public static int getAllowedPlots(Player p) {
        if (p.hasPermission("plots.admin")) {
            return Integer.MAX_VALUE;
        }
        for (int x = 0; x <= 100; x++) {
            if (p.hasPermission("plots.plot." + (100-x))) {
                return 100-x;
            }
        }
        return 0;
    }

    /**
     * 
     * @return PlotMain.getPlots();
     * @deprecated
     */
    @Deprecated
    public static Set<Plot> getPlots() {
        return PlotMain.getPlots();
    }

    /**
     * \\previous\\
     * 
     * @param plr
     * @param msg
     *            Was used to wrap the chat client length (Packets out--)
     */
    public static void sendMessageWrapped(Player plr, String msg) {
        plr.sendMessage(msg);
    }

    /**
     * Send a message to the player
     * 
     * @param plr
     *            Player to recieve message
     * @param msg
     *            Message to send
     */
    public static void sendMessage(Player plr, String msg) {
        if ((msg.length() == 0) || msg.equalsIgnoreCase("")) {
            return;
        }
        sendMessageWrapped(plr, ChatColor.translateAlternateColorCodes('&', C.PREFIX.s() + msg));
    }

    /**
     * Send a message to the player
     * 
     * @param plr
     *            Player to recieve message
     * @param c
     *            Caption to send
     */
    public static void sendMessage(Player plr, C c, String... args) {
        if (c.s().length() < 1) {
            return;
        }
        String msg = c.s();
        if ((args != null) && (args.length > 0)) {
            for (String str : args) {
                msg = msg.replaceFirst("%s", str);
            }
        }
        sendMessage(plr, msg);
    }
}
