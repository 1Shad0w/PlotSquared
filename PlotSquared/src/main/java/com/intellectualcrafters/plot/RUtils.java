/*
 * Copyright (c) IntellectualCrafters - 2014. You are not allowed to distribute
 * and/or monetize any of our intellectual property. IntellectualCrafters is not
 * affiliated with Mojang AB. Minecraft is a trademark of Mojang AB.
 *
 * >> File = RUtils.java >> Generated by: Citymonstret at 2014-08-09 01:44
 */

package com.intellectualcrafters.plot;

import org.bukkit.Location;
import org.bukkit.entity.Player;

/**
 * Random utilities
 *
 * @author Citymonstret
 */
public class RUtils {

    public static long getTotalRam() {
        return (Runtime.getRuntime().maxMemory() / 1024) / 1024;
    }

    public static long getFreeRam() {
        return (Runtime.getRuntime().freeMemory() / 1024) / 1024;
    }

    public static long getRamPercentage() {
        return (getFreeRam() / getTotalRam()) * 100;
    }

    public static String formatTime(final double sec) {
        final double h = sec / 3600;
        final double m = (sec % 3600) / 60;
        final double s = sec % 60;
        final String string = C.TIME_FORMAT.s();

        final String s_h = (int) h + " " + ((int) h != 1 ? "hours" : "hour");
        final String s_m = (int) m + " " + ((int) m != 1 ? "minutes" : "minute");
        final String s_s = (int) s + " " + ((int) s != 1 ? "seconds" : "second");
        return string.replaceAll("%sec%", s_s).replaceAll("%min%", s_m).replaceAll("%hours%", s_h);
    }

    enum Direction {
        SOUTH(0),
        EAST(1),
        NORTH(2),
        WEST(3);
        private final int i;

        Direction(final int i) {
            this.i = i;
        }

        public int getInt() {
            return this.i;
        }
    }

    public void forceTexture(final Player p) {
        p.setResourcePack(Settings.PLOT_SPECIFIC_RESOURCE_PACK);
    }

    public Direction getDirection(final Location l) {
        final double d = ((l.getYaw() * 4.0F) / 360.0F) + 0.5D;
        final int i = (int) d;
        final int x = d < i ? i - 1 : i;
        switch (x) {
            case 0:
                return Direction.SOUTH;
            case 1:
                return Direction.EAST;
            case 2:
                return Direction.NORTH;
            case 3:
                return Direction.WEST;
            default:
                return null;
        }
    }

    public boolean compareDirections(final Location l1, final Location l2) {
        return getDirection(l1) == getDirection(l2);
    }

}
